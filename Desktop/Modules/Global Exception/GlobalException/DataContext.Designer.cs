//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 01-02-2022 12:53:41
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace GlobalExceptionModuleContext
{

    [DatabaseAttribute(Name = "GlobalExceptionModule")]
    [ProviderAttribute(typeof(Devart.Data.SqlServer.Linq.Provider.SqlDataProvider))]
    public partial class GlobalExceptionModuleDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(GlobalExceptionModuleDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);

        #endregion

        public GlobalExceptionModuleDataContext() :
        base(@"Data Source=DESKTOP-PF2SA84;Initial Catalog=GlobalExceptionModule;Integrated Security=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public GlobalExceptionModuleDataContext(MappingSource mappingSource) :
        base(@"Data Source=DESKTOP-PF2SA84;Initial Catalog=GlobalExceptionModule;Integrated Security=True;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public GlobalExceptionModuleDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public GlobalExceptionModuleDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public GlobalExceptionModuleDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public GlobalExceptionModuleDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }
    }
}

namespace GlobalExceptionModuleContext
{

    /// <summary>
    /// There are no comments for GlobalExceptionModuleContext.User in the schema.
    /// </summary>
    [Table(Name = @"dbo.Users")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _UserID;

        private string _UserName;

        private string _EmailAddress;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnEmailAddressChanging(string value);
        partial void OnEmailAddressChanged();
        #endregion

        public User()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserID in the schema.
        /// </summary>
        [Column(Storage = "_UserID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if (this._UserID != value)
                {
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Storage = "_UserName", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging("UserName");
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmailAddress in the schema.
        /// </summary>
        [Column(Storage = "_EmailAddress", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string EmailAddress
        {
            get
            {
                return this._EmailAddress;
            }
            set
            {
                if (this._EmailAddress != value)
                {
                    this.OnEmailAddressChanging(value);
                    this.SendPropertyChanging("EmailAddress");
                    this._EmailAddress = value;
                    this.SendPropertyChanged("EmailAddress");
                    this.OnEmailAddressChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
